<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Haskell Lesson 1]]></title>
    <url>%2F2017%2F05%2F10%2FHaskell-Lesson-1%2F</url>
    <content type="text"><![CDATA[--- title: Haskell Lesson 1 date: 2017-05-10 16:04:41 tags: --- # Exercise 1: Traffic lights ```haskell {-# OPTIONS_GHC -fno-warn-warnings-deprecations -fno-warn-unused-binds #-} import CodeWorld main :: IO () main = exercise1 -- Fill in the blanks! (When I say blanks, I mean undefineds) -- Exercise 1 botCircle, midCircle, topCircle :: Color -> Picture botCircle c = colored c (translated 0 (-3) (solidCircle 1)) midCircle c = colored c (translated 0 0 (solidCircle 1)) topCircle c = colored c (translated 0 3 (solidCircle 1)) frame :: Picture frame = rectangle 2.5 9.5 trafficLight :: Integer -> Picture trafficLight 0 = botCircle green & topCircle black & midCircle black & frame -- G trafficLight 1 = botCircle black & topCircle black & midCircle yellow & frame -- Y trafficLight 2 = botCircle black & topCircle red & midCircle black & frame -- R trafficLight 3 = botCircle black & topCircle red & midCircle yellow & frame -- RY trafficController :: Double -> Picture trafficController t | round (t) `mod` 6 == 0||round (t) `mod` 6 == 1 = trafficLight 0 | round (t) `mod` 6 == 2 = trafficLight 1 | round (t) `mod` 6 == 3||round (t) `mod` 6 == 4 = trafficLight 2 | otherwise = trafficLight 3 trafficLightAnimation :: Double -> Picture trafficLightAnimation = trafficController exercise1 :: IO () exercise1 = animationOf trafficLightAnimation ```]]></content>
  </entry>
  <entry>
    <title><![CDATA[Learning Haskell]]></title>
    <url>%2F2017%2F05%2F05%2FLearning%20Haskell%2F</url>
    <content type="text"><![CDATA[--- title: Learning Haskell date: 2017-05-05 18:40:01 tags: Haskwell --- ## Learning Haskell ### Course description [CIS 194: Introduction to Haskell (Fall 2016)](https://www.seas.upenn.edu/~cis194/fall16/) Haskell is a high-level, purely functional programming language with a strong static type system and elegant mathematical underpinnings. It is being increasingly used in industry by organizations such as Facebook, AT&T, and NASA, along with several financial firms. We will explore the joys of functional programming, using Haskell as a vehicle. In the first part of the course, you will learn to use Haskell to easily and conveniently write practical programs. The last couple of weeks will consist of several special topics that explore advanced features of Haskell. Evaluation will be based on class participation, weekly programming assignments, and an open-ended final project. ### Good Haskell Style 1. DO use camelCase for function and variable names. Variant: Use ids_with_underscores for local variables only, and use camelCase for global ones. 2. DO use descriptive function names, which are as long as they need to be but no longer than they have to be. - Good: solveRemaining. - Bad: slv. - Ugly: solveAllTheCasesWhichWeHaven'tYetProcessed. 3. DON’T use tab characters. Ever. Haskell is layout-sensitive and tabs Mess Everything Up. I don’t care how you feel about tabs when coding in other languages. Just trust me on this one. Note this does not mean you need to hit space a zillion times to indent each line; your Favorite Editor ought to support auto-indentation using spaces instead of tabs. 4. DO keep lines at a natural length, and avoid long lines when it costs readability. I am not a fan of hard rules when it comes to line length, so I give you no precise number. Some lines just have to be a bit longer than usual. 5. DO give every top-level function a type signature. Type signatures enhance documentation, clarify thinking, and provide nesting sites for endangered bird species. Top-level type signatures also result in better error messages. With no type signatures, type errors tend to show up far from where the real problem is; explicit type signatures help localize type errors. Locally defined functions and constants (part of a expression or clause) do not need type signatures, but adding them doesn’t hurt (in particular, the argument above about localizing type errors still applies). 6. DO precede every top-level function by a comment explaining what it does. 7. DO use -Wall. Either pass -Wall to ghc on the command line, or (easier) put {-# OPTIONS_GHC -Wall #-} at the top of your .hs file. All your submitted programs should compile with no warnings. 8. DO, as much as possible, break up your programs into small functions that do one thing, and compose them to create more complex functions. 9. DO make all your functions total. That is, they should give sensible results (and not crash) for every input.]]></content>
      <tags>
        <tag>Haskwell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[--- title: Hello World --- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). ## Quick Start ### Create a new post ``` bash $ hexo new "My New Post" ``` More info: [Writing](https://hexo.io/docs/writing.html) ### Run server ``` bash $ hexo server ``` More info: [Server](https://hexo.io/docs/server.html) ### Generate static files ``` bash $ hexo generate ``` More info: [Generating](https://hexo.io/docs/generating.html) ### Deploy to remote sites ``` bash $ hexo deploy ``` More info: [Deployment](https://hexo.io/docs/deployment.html)]]></content>
  </entry>
</search>